@page "/customers"

@inherits LoadingComponent
@inject ICustomerProfileService _customers

@if (creating)
{
    <CreateCustomerComponent 
        OnCancel="ToggleCreating" 
        OnSuccess="CustomerCreated" />
}
else if (selected)
{
    <CustomerDetailsComponent 
        SelectedCustomer="SelectedCustomer"
        OnClose="ToggleSelected" />
}
else
{
    <MudContainer Class="mt-5" MaxWidth="MaxWidth.Large">
        <MudDataGrid T="CustomerProfileModel" Items="Customers"
            Dense="true"
            Loading="Loading" LoadingProgressColor="Color.Warning"
            RowClick="SelectCustomer" Hover="true"
            QuickFilter="SearchFilter">

            <ToolBarContent>
                @if (!selected && !creating)
                {
                    <MudSpacer />
                    <MudText Typo="Typo.h6">Customers</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    <MudSpacer />
                    <MudIconButton Class="pa-2" OnClick="ToggleCreating" Icon="@Icons.Material.Filled.PersonAdd" Color="Color.Success" Size="Size.Large" Title="Create Customer" />
                }
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Name" />
                <PropertyColumn Property="x => x.Contact" />
            </Columns>
        </MudDataGrid>
    </MudContainer>
}

@code {
    private List<CustomerProfileModel> Customers { get; set; } = [];
    private CustomerProfileModel SelectedCustomer { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        BeginLoading();
        Customers = await _customers.ListCustomers();
        FinishLoading();
    }

    private string searchString = string.Empty;
    private Func<CustomerProfileModel, bool> SearchFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private bool creating;
    private void ToggleCreating() => creating = !creating;
    private void CustomerCreated(CustomerProfileModel newCustomer)
    {
        Customers.Add(newCustomer);
        ToggleCreating();
    }

    private bool selected;
    private void ToggleSelected() => selected = !selected;
    private void SelectCustomer(DataGridRowClickEventArgs<CustomerProfileModel> clickArgs)
    {
        SelectedCustomer = clickArgs.Item;
        ToggleSelected();
    }
}