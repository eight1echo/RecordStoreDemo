@using RecordStoreDemo.Features.Customers.SpecialOrders.Commands.CreateSpecialOrder
@using RecordStoreDemo.Features.Inventory.Products.Commands.CreateInventoryProduct

@inherits BaseComponent
@inject ICatalogService _catalogs
@inject ICustomerProfileService _customers
@inject IInventoryProductService _inventory
@inject ISpecialOrderService _specialOrders
@inject IWebstoreProductService _webstoreProducts

<MudContainer Fixed="true">
    <MudGrid>
        <MudItem xs="12" Class="d-flex justify-end px-5 mt-3">
            <MudIconButton OnClick="async() => await OnClose.InvokeAsync()" Icon="@Icons.Material.Outlined.Cancel" Size="Size.Large" Title="Close" />
        </MudItem>
    </MudGrid>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Large">

    <MudTabs @ref="Tabs" Class="mt-5" Elevation="5" Rounded="true" ApplyEffectsToContainer="true" Position="Position.Top" >
        <MudTabPanel @ref="CatalogPanel" Text="Catalog" >
            @if (ProductDetails.CatalogProduct is not null)
            {
                <CatalogProductDetailsComponent CatalogProduct="@ProductDetails.CatalogProduct" />
            }              
        </MudTabPanel>

        <MudTabPanel @ref="InventoryPanel" Text="Inventory" OnClick="GetInventoryProduct">
            @if (ProductDetails.InventoryProduct is not null)
            {
                <InventoryProductDetailsComponent Product="@ProductDetails.InventoryProduct" />                
            }
            else
            {
                <MudContainer Class="mt-5 pa-5" MaxWidth="MaxWidth.Medium">
                    <MudGrid>
                        <MudItem xs="12" Class="d-flex justify-center">
                            <MudButton OnClick="@AddToInventory" Color="Color.Primary" Variant="Variant.Outlined">Add to Inventory</MudButton>
                        </MudItem>
                    </MudGrid>                    
                </MudContainer>
            }
        </MudTabPanel>

        <MudTabPanel @ref="WebstorePanel" Text="Webstore" OnClick="GetWebstoreProduct">
            @if (ProductDetails.WebstoreProduct is not null)
            {
                <WebstoreProductDetailsComponent Product="@ProductDetails.WebstoreProduct" />
            }
            else
            {
                <MudContainer Class="mt-5 pa-5" MaxWidth="MaxWidth.Medium">
                    <MudGrid>
                        <MudItem xs="12" Class="d-flex justify-center">
                            @if (ProductDetails.InventoryProduct is null)
                            {
                                <MudText Typo="Typo.h6">Product not in Inventory</MudText>
                            }
                            else
                            {
                                @if (Loading)
                                {
                                    <LoadingSpinner />
                                }
                                else
                                {
                                    <MudButton OnClick="@AddToWebstore" Color="Color.Primary" Variant="Variant.Outlined">Add to Webstore</MudButton>
                                }
                            }                            
                        </MudItem>
                    </MudGrid>
                </MudContainer>                    
            }       
        </MudTabPanel>

        <MudTabPanel @ref="SpecialOrderPanel" Text="Special Orders" OnClick="GetSpecialOrders">
            @if (ProductDetails.InventoryProduct is not null)
            {
                @if (addingOrder)
                {
                    <EditForm Model="CreateOrderRequest" OnValidSubmit="CreateSpecialOrder">
                        <MudGrid Class="pa-3">
                            <MudItem xs="4">
                                <MudTextField T="string" Text="@customerQuery" TextChanged="FilterCustomers" Immediate="true" Label="Search Customers" Variant="Variant.Filled" />
                            </MudItem>
                            @if (customerQuery == string.Empty)
                            {
                                <MudItem xs="4">
                                    <MudTextField Value="@string.Empty" ReadOnly="true" Variant="Variant.Filled" Label="Select Customer" />
                                </MudItem>
                            }
                            else
                            {
                                <MudItem xs="4">
                                    <MudSelect @bind-Value="CreateOrderRequest.CustomerProfileId" Label="Select Customer" Variant="Variant.Filled">
                                        @foreach (var customer in FilteredCustomers)
                                        {
                                            <MudSelectItem Value="customer.Id">@customer.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>                            
                            }
                            <MudItem xs="2">
                                <MudNumericField @bind-Value="@CreateOrderRequest.Quantity" Label="Quantity" Variant="Variant.Outlined" Min="1" />
                            </MudItem>
                            <MudItem xs="2" Class="d-flex justify-end">
                                <MudIconButton ButtonType="ButtonType.Submit" Color="Color.Success" Icon="@Icons.Material.Filled.Save" Size="Size.Large" Title="Save" />
                                <MudIconButton OnClick="Cancel" Color="Color.Error" Icon="@Icons.Material.Filled.DoNotDisturb" Size="Size.Large" Title="Cancel" />
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                }
                else
                {
                    <MudGrid>
                        <MudItem xs="12" Class="d-flex justify-end">
                            <MudIconButton OnClick="AddSpecialOrder" Icon="@Icons.Material.Outlined.PostAdd" Color="Color.Success" Size="Size.Large" Title="Add" />
                        </MudItem>
                    </MudGrid>
                }
                
                <ProductSpecialOrdersDataGrid SpecialOrders="ProductDetails.SpecialOrders" />             
            }
            else
            {
                <MudContainer Class="mt-5 pa-5" MaxWidth="MaxWidth.Medium">
                    <MudGrid>
                        <MudItem xs="12" Class="d-flex justify-center">
                            <MudText Typo="Typo.h6">Product not in Inventory</MudText>
                        </MudItem>
                    </MudGrid>
                </MudContainer>
            }
        </MudTabPanel>
    </MudTabs>

</MudContainer>

@code {
    [Parameter] public ProductDetailsModel ProductDetails { get; set; } = new();
    [Parameter] public string InitialTab { get; set; } = string.Empty;
    [Parameter] public EventCallback OnClose { get; set; }

    MudTabs? Tabs { get; set; } = new();
    MudTabPanel? CatalogPanel { get; set; } = new();
    MudTabPanel? InventoryPanel { get; set; } = new();
    MudTabPanel? SpecialOrderPanel { get; set; } = new();
    MudTabPanel? WebstorePanel { get; set; } = new();

    private CreateSpecialOrderRequest CreateOrderRequest { get; set; } = new();
    private List<CustomerProfileModel> Customers { get; set; } = [];
    private List<CustomerProfileModel> FilteredCustomers { get; set; } = [];
    private string customerQuery = string.Empty;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (InitialTab == "Inventory")
            {
                Tabs!.ActivatePanel(InventoryPanel);
            }
        }        
    }

    private async Task GetInventoryProduct()
    {
        if (ProductDetails.CatalogProduct is null)
        {
            var result = await _catalogs.FindCatalogProductByUPC(ProductDetails.UPC);
            if (result.Successful)
            {
                ProductDetails.CatalogProduct = result.Value;
            }
            else await OpenErrorDialog(result.Message);            
        }

        if (ProductDetails.InventoryProduct is null)
        {
            var result = await _inventory.FindInventoryProductByUPC(ProductDetails.UPC);
            if (result.Successful)
            {
                ProductDetails.InventoryProduct = result.Value;
            }
            if (result.Message == "Not Found")
            {
                ProductDetails.InventoryProduct = null;
            }
            else await OpenErrorDialog(result.Message);        
        }        
    }

    private async Task GetWebstoreProduct()
    {
        if (ProductDetails.InventoryProduct is null)
        {
            await GetInventoryProduct();
        }

        if (ProductDetails.InventoryProduct is not null)
        {
            if (ProductDetails.WebstoreProduct is null)
            {
                BeginLoading();
                ProductDetails.WebstoreProduct = await _webstoreProducts.GetProduct(ProductDetails.UPC);
                FinishLoading();
            }
        }        
    }

    private async Task GetSpecialOrders()
    {
        if (ProductDetails.InventoryProduct is null)
        {
            await GetInventoryProduct();
        }

        var result = await _specialOrders.GetProductSpecialOrders(ProductDetails.InventoryProduct!.Id);
        if (result.Successful)
        {
            ProductDetails.SpecialOrders = result.Value!;
        }
        else await OpenErrorDialog(result.Message);      
    }

    private async Task AddToInventory()
    {
        if (ProductDetails.CatalogProduct is not null)
        {
            var request = new CreateInventoryProductRequest
            {
                CatalogProductId = ProductDetails.CatalogProduct.Id,
                Artist = ProductDetails.CatalogProduct.Artist,
                Format = ProductDetails.CatalogProduct.Format,
                StreetDate = DateTime.Parse(ProductDetails.CatalogProduct.StreetDate),
                Title = ProductDetails.CatalogProduct.Title,
                UPC = ProductDetails.CatalogProduct.UPC
            };

            var result = await _inventory.CreateInventoryProduct(request);
            if (result.Successful)
            {
                ProductDetails.InventoryProduct = result.Value!;
            }
            else await OpenErrorDialog(result.Message);          
        }
    }
    private async Task AddToWebstore()
    {
        if (ProductDetails.InventoryProduct is not null)
        {
            BeginLoading();
            ProductDetails.WebstoreProduct = await _webstoreProducts.CreateDraftProduct(ProductDetails.InventoryProduct);
            FinishLoading();
        }
        else
        {
            throw new Exception();
        }
    }

    private void FilterCustomers(string query)
    {
        customerQuery = query;
        FilteredCustomers = Customers.Where(c => c.Name.Contains(customerQuery, StringComparison.InvariantCultureIgnoreCase)).ToList();

        if (FilteredCustomers.Any())
        {
            CreateOrderRequest.CustomerProfileId = FilteredCustomers.First().Id;
        }        
    }

    private bool addingOrder = false;
    private void ToggleAddingOrder() => addingOrder = !addingOrder;
    private async Task AddSpecialOrder()
    {
        ToggleAddingOrder();

        var result = await _customers.ListCustomers();
        if (result.Successful)
        {
            Customers = result.Value!;
            CreateOrderRequest.InventoryProductId = ProductDetails.InventoryProduct!.Id;
        }
        else await OpenErrorDialog(result.Message);            
    }
    private async Task CreateSpecialOrder()
    {
        var result = await _specialOrders.CreateSpecialOrder(CreateOrderRequest);
        if (result.Successful)
        {
            var order = result.Value!;
            ProductDetails.CatalogProduct!.CartQuantity += CreateOrderRequest.Quantity;
            ProductDetails.SpecialOrders.Add(order);
            Cancel();
        }
        else await OpenErrorDialog(result.Message); 
    }
    private void Cancel()
    {
        customerQuery = string.Empty;
        CreateOrderRequest = new();
        ToggleAddingOrder();
    }
}