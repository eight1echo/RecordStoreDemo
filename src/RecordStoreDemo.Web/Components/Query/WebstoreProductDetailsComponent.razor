@inject IWebstoreImageService _imageService
@inject IDialogService Dialog
@inject IWebstoreProductService _shopifyProducts
@inject IJSRuntime JSInterop

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mud-theme-dark py-5">

    <MudGrid>
        <MudItem xs="1">
            @if (!editing && !imageSearching)
            {
                <MudIconButton OnClick="EditProduct" Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Size="Size.Large" Title="Edit" />
                <MudIconButton OnClick="ImageSearch" Icon="@Icons.Material.Filled.ImageSearch" Color="Color.Warning" Size="Size.Large" Title="Image" />
            }
        </MudItem>
        <MudItem xs="7">                
                @if (editing)
                {
                    <MudPaper Class="pa-5">
                        <MudGrid>
                            <MudItem xs="4">
                                <MudSelect T="string" @bind-Value="UpdateProductRequest.Status" Label="Status" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                                    <MudSelectItem Value="@("draft")" />
                                    <MudSelectItem Value="@("active")" />
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4">
                            <MudNumericField T="decimal" @bind-Value="UpdateProductRequest.Weight" Label="Weight" Variant="Variant.Outlined" Min="0.1m" />
                            </MudItem>
                            <MudItem xs="4">
                            <MudNumericField T="decimal" @bind-Value="UpdateProductRequest.Price" Label="Price" Variant="Variant.Outlined" Min="0.99m" />
                            </MudItem>
                            <MudItem xs="12">
                            <MudTextField @bind-Value="UpdateProductRequest.Title" Label="Title" Variant="Variant.Filled"></MudTextField>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>

                <MudGrid Class="mt-1">
                    <MudItem xs="12" Class="d-flex justify-end">
                        <MudIconButton OnClick="SaveEdits" Color="Color.Success" Icon="@Icons.Material.Filled.Save" Size="Size.Large" Title="Save" />
                        <MudIconButton OnClick="ToggleEditing" Color="Color.Error" Icon="@Icons.Material.Filled.DoNotDisturb" Size="Size.Large" Title="Cancel" />
                    </MudItem>
                </MudGrid>
                    
                }
                else
                {
                    <MudPaper Class="pa-5">
                        <MudGrid>
                            <MudItem xs="4">
                                <MudTextField Value="Product.Status" Label="Status" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField Value="Product.Variant.Weight" Label="Weight (kg)" Variant="Variant.Text" ReadOnly="true" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField Value="Product.Variant.Price" Label="Price" Variant="Variant.Text" ReadOnly="true" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField Value="Product.Title" Label="Title" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                        
                    <MudPaper Class="pa-5 mt-3">
                        <MudGrid>
                            <MudItem xs="2">
                                <MudText Typo="Typo.h6">Tags:</MudText>
                            </MudItem>
                            <MudItem xs="8">
                                @foreach (var tag in Product.Tags)
                                {
                                    <MudChip Text="@tag" Variant="Variant.Outlined" SelectedColor="Color.Primary"></MudChip>
                                }                 
                            </MudItem>
                            <MudItem xs="2">
                                <MudIconButton OnClick="OpenTagsDialog" Icon="@Icons.Material.Filled.MenuOpen" Color="Color.Primary"></MudIconButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                        
                    <MudPaper Class="pa-5 mt-3">
                        <MudGrid>
                            <MudItem xs="2">
                                <MudText Typo="Typo.h6">Genres:</MudText>
                            </MudItem>
                            <MudItem xs="8">
                                @foreach (var genre in Product.Genres)
                                {
                                    <MudChip Text="@genre" Variant="Variant.Outlined" SelectedColor="Color.Primary"></MudChip>
                                }
                            </MudItem>
                            <MudItem xs="2">
                            <MudIconButton OnClick="OpenGenresDialog" Icon="@Icons.Material.Filled.MenuOpen" Color="Color.Primary"></MudIconButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>

                <MudPaper Class="pa-5 mt-3">
                    <MudGrid>
                        <MudItem xs="2">
                            <MudText Typo="Typo.h6">Styles:</MudText>
                        </MudItem>
                        <MudItem xs="8">
                            @foreach (var style in Product.Styles)
                            {
                                <MudChip Text="@style" Variant="Variant.Outlined" SelectedColor="Color.Primary"></MudChip>
                            }
                        </MudItem>
                        <MudItem xs="2">
                            <MudIconButton OnClick="OpenStylesDialog" Icon="@Icons.Material.Filled.MenuOpen" Color="Color.Primary"></MudIconButton>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }
        </MudItem>

        <MudItem xs="4">
            <MudGrid>

                <MudItem xs="6" Class="d-flex align-center justify-end">
                    <MudText Typo="Typo.h5">UPC:</MudText>
                </MudItem>
                <MudItem xs="6" Class="d-flex align-center justify-center">
                    <MudText>@Product.Variant.Barcode<MudIconButton OnClick="() => CopyToClipboard(Product.Variant.Barcode)" Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Primary"></MudIconButton></MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="@Product.ImagePath" Label="Image Path" Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12">
                    @if (imageSearchInProgress)
                    {
                        <LoadingSpinner />
                    }
                    else
                    {
                        <div class="d-flex justify-center">
                            <MudImage ObjectFit="ObjectFit.Contain" Height="350" Width="350" Src="@Product.ImagePath" Elevation="25" Class="rounded-lg" />
                        </div>
                        @if (imageSearching && FoundImages.Any())
                        {
                            <MudCard Class="mt-5">
                                <MudCardActions Class="d-flex justify-center">
                                    <MudIconButton OnClick="PreviousImage" Icon="@Icons.Material.Filled.ArrowBack"></MudIconButton>
                                    <MudText>Image @(SelectedImageIndex + 1) of @FoundImages.Count</MudText>
                                    <MudIconButton OnClick="NextImage" Icon="@Icons.Material.Filled.ArrowForward"></MudIconButton>
                                    <MudIconButton OnClick="SaveImage" Color="Color.Success" Icon="@Icons.Material.Filled.Save" Size="Size.Large" Title="Save" />
                                    <MudIconButton OnClick="CancelImage" Color="Color.Error" Icon="@Icons.Material.Filled.DoNotDisturb" Size="Size.Large" Title="Cancel" />
                                </MudCardActions>
                            </MudCard>
                        }
                    }                            
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>

    @if (!editing)
    {

    }

</MudContainer>

@code {
    [Parameter] public WebstoreProductModel Product { get; set; } = new();

    private UpdateWebstoreImageRequest UpdateImageRequest { get; set; } = new();
    private UpdateWebstoreProductRequest UpdateProductRequest { get; set; } = new();

    private bool editing;
    private void ToggleEditing() => editing = !editing;
    private void EditProduct()
    {
        UpdateProductRequest = new()
        {
            ProductId = Product.Id,
            Price = Product.Variant.Price,
            Status = Product.Status,
            Title = Product.Title,
            Weight = Product.Variant.Weight,
            UPC = Product.Variant.Barcode,
        };

        ToggleEditing();
    }
    private async Task SaveEdits()
    {
        await _shopifyProducts.UpdateProduct(UpdateProductRequest);

        Product.Variant.Price = UpdateProductRequest.Price;
        Product.Status = UpdateProductRequest.Status;
        Product.Title = UpdateProductRequest.Title;
        Product.Variant.Weight = UpdateProductRequest.Weight;

        ToggleEditing();
    }

    private async Task OpenGenresDialog()
    {
        var options = new DialogOptions()
            {
                CloseButton = true,
                DisableBackdropClick = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Large,
            };

        var parameters = new DialogParameters
            {
                ["Product"] = Product,
            };


        var dialog = await Dialog.ShowAsync<WebstoreGenresDialog>("Genres", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {

        }
    }

    private async Task OpenStylesDialog()
    {
        var options = new DialogOptions()
            {
                CloseButton = true,
                DisableBackdropClick = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Large,
            };

        var parameters = new DialogParameters
            {
                ["Product"] = Product,
            };


        var dialog = await Dialog.ShowAsync<WebstoreStylesDialog>("Styles", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {

        }
    }

    private async Task OpenTagsDialog()
    {
        var options = new DialogOptions()
            {
                CloseButton = true,
                DisableBackdropClick = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Large,
            };

        var parameters = new DialogParameters
            {
                ["Product"] = Product,
            };


        var dialog = await Dialog.ShowAsync<WebstoreTagsDialog>("Tags", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {

        }
    }

    private List<ImageModel> FoundImages { get; set; } = new List<ImageModel>();
    private bool imageSearching;
    private bool imageSearchInProgress;
    private void ToggleImageSearch() => imageSearching = !imageSearching;
    private async Task ImageSearch()
    {
        UpdateImageRequest.ProductId = Product.Id;

        ToggleImageSearch();
        imageSearchInProgress = true;
        FoundImages = await _imageService.FindImages(new WebQuery(Product.Title)
        {
            UPC = Product.Variant.Barcode,
            Source = WebQuerySource.All,
        });

        if (FoundImages.Any())
        {
            Product.ImagePath = FoundImages.First().Path;
            UpdateImageRequest.ImagePath = FoundImages.First().Path;            
        }
        imageSearchInProgress = false;
    }
    private async Task SaveImage()
    {
        UpdateImageRequest.ImagePath = Product.ImagePath;
        await _imageService.UpdateImage(UpdateImageRequest);
        ToggleImageSearch();
    }
    private void CancelImage()
    {
        Product.ImagePath = string.Empty;
        ToggleImageSearch();
    }

    private int SelectedImageIndex = 0;
    void NextImage()
    {
        if (SelectedImageIndex < (FoundImages.Count))
        {
            SelectedImageIndex += 1;
        }

        if (SelectedImageIndex == FoundImages.Count)
        {
            SelectedImageIndex = 0;
        }

        Product.ImagePath = FoundImages[SelectedImageIndex].Path;
    }
    void PreviousImage()
    {
        if (SelectedImageIndex == 0)
        {
            SelectedImageIndex = FoundImages.Count - 1;
        }
        else if (SelectedImageIndex > 0)
        {
            SelectedImageIndex -= 1;
        }


        Product.ImagePath = FoundImages[SelectedImageIndex].Path;
    }
    private async Task CopyToClipboard(string? text)
    {
        if (text is not null)
        {
            await JSInterop.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
    }
}